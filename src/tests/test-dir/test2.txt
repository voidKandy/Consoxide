
                                     context.rs              walk.rs               test1.txt                                                                                    
    .git                    ││ 22 #[cfg(test)]
    src                     ││ 21 use crate::agent::context::tmux_session::Pane;
      agent                 │ 20 use crate::agent::context::walk::Directory;      remove the whole `use` item
        context             ││ 19
           manager.rs        ││ 18 #[allow(dead_code)]
           mod.rs            ││ 17 const TEST_DIRECTORY: &str = "./src/tests/test-dir";
           tmux_session.rs   ││ 16
           walk.rs           ││ 15 #[test]
        functions           ││ 14 fn walk_test() {
         gpt.rs              ││ 13     println!("{TEST_DIRECTORY}");
         handler.rs          ││ 12     let root = Directory::build(TEST_DIRECTORY).unwrap();
         mod.rs              ││ 11     let test1_content = &root.files[0].content;
      tests                 ││ 10     assert_eq!(root.children.len(), 1);
        test-dir            ││  9     assert_eq!(root.files.len(), 3);
          child             ││  8     assert_eq!(test1_content, "hello from test 1\n")
           test1.txt         ││  7 }
           test2.txt         ││  6
           test3.txt         ││  5 #[test]
         agents.rs           ││  4 fn capture_pane_test() {
         context.rs          ││  3     let pane = Pane::capture();
         functions.rs        ││  2     let response = pane.write_to(&format!("{}/test2.txt", TEST_DIRECTORY));
         mod.rs              ││  1     assert!(response.is_ok())
       main.rs               ││ 23 }
       start.sh              │
    target                  │
     .env                    │
     .gitignore              │
     Cargo.lock              │
     Cargo.toml              │
     output.txt              │
     pane.txt                │
     README.md               │

:!cargo test
   Compiling tmux-monitor v0.1.0 (/Users/ezrafreeman/Documents/GitHub/Termi-Bot/tmux-monitor)
warning: unused import: `std::collections::HashMap`
 --> src/agent/handler.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `tmux-monitor` (bin "tmux-monitor" test) generated 1 warning (run `cargo fix --bin "tmux-monitor" --tests` to apply 1 suggestion)
    Finished test [unoptimized + debuginfo] target(s) in 0.46s
     Running unittests src/main.rs (target/debug/deps/tmux_monitor-134efb0e6846965b)

running 6 tests
test tests::agents::function_agent_test ... ignored
test tests::agents::prompt_agent_test ... ignored
test tests::context::walk_test ... ok
test tests::functions::test_function_render ... ok
test tests::functions::function_deserialization ... ok

